{
	"info": {
		"_postman_id": "0fed4c41-ed3a-44df-a2e4-4dd66b67c20e",
		"name": "taiga-next e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9835734"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "200 auth.token (user1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate the API contract",
									"    pm.expect(jsonRes).to.have.property(\"token\");",
									"    pm.expect(jsonRes).to.have.property(\"refresh\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 auth.token.refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"token\");",
									"    pm.expect(jsonRes).to.have.property(\"refresh\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}/api/v2/auth/token/refresh",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 auth.token.deny",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.unset(\"auth_token\");",
									"    pm.environment.unset(\"refresh_token\");",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}/api/v2/auth/token/deny",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}"
							],
							"path": [
								"api",
								"v2",
								"auth",
								"token",
								"deny"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 my.user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"username\");",
									"    pm.expect(jsonRes).to.have.property(\"fullName\");",
									"    pm.expect(jsonRes).to.have.property(\"email\");",
									"    pm.expect(jsonRes).to.have.property(\"lang\");",
									"    pm.expect(jsonRes).to.have.property(\"color\");",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/user",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 my.user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"username\");",
									"    pm.expect(jsonRes).to.have.property(\"fullName\");",
									"    pm.expect(jsonRes).to.have.property(\"email\");",
									"    pm.expect(jsonRes).to.have.property(\"lang\");",
									"    pm.expect(jsonRes).to.have.property(\"color\");",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"Norma Fisher\",\n  \"lang\": \"es-ES\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/user",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"username\");",
									"    pm.expect(jsonRes).to.have.property(\"fullName\");",
									"    pm.expect(jsonRes).to.have.property(\"email\");",
									"    pm.expect(jsonRes).to.have.property(\"lang\");",
									"    pm.expect(jsonRes).to.have.property(\"color\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"ada.lovelace{{$randomInt}}@email.com\",\n  \"fullName\": \"Ada Lovelace\",\n  \"password\": \"CorrectP4ssword%\",\n  \"acceptTerms\": true,\n  \"lang\": \"es-ES\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 users with projectInvitationToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"username\");",
									"    pm.expect(jsonRes).to.have.property(\"fullName\");",
									"    pm.expect(jsonRes).to.have.property(\"color\");",
									"    pm.expect(jsonRes).to.have.property(\"email\");",
									"    pm.expect(jsonRes).to.have.property(\"lang\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"ada.lovelace{{$randomInt}}@email.com\",\n  \"fullName\": \"Ada Lovelace\",\n  \"password\": \"CorrectP4ssword%\",\n  \"acceptTerms\": true,\n  \"projectInvitationToken\": \"token\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 users.verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"eyJ0eX.eyJ0eXDJs042HJ9Qz-IhCP_Caxys5Iy8Vo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users/verify",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 reset password request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"reset-token\", \"eyJ0eX.eyJ0eXDJs042HJ9Qz-IhCP_Caxys5Iy8Vo\");",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var res = pm.response.json();",
									"",
									"    console.log(res)",
									"",
									"    // Validate response API fields",
									"    pm.expect(res).to.be.true;",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user1@taiga.demo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users/reset-password",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 reset password verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users/reset-password/{{reset-token}}/verify",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users",
								"reset-password",
								"{{reset-token}}",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 reset password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"Taiga123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/users/reset-password/{{reset-token}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"users",
								"reset-password",
								"{{reset-token}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "workspaces",
			"item": [
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"ws-id\", pm.response.json().id);",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"isPremium\");",
									"",
									"    pm.expect(jsonRes.name).to.be.eql(\"My workspace\");",
									"    pm.expect(jsonRes.color).to.be.eql(1);",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(9);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My workspace\",\n  \"color\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces.{w}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"name\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"color\");",
									"    pm.expect(jsonRes).to.have.property(\"isPremium\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(9);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "workspaces.{w}.projects",
			"item": [
				{
					"name": "N/A log in as user1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save a workspace id in environment\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    var wsWithLatesPtoject = false;",
									"    for (const [i, ws] of jsonRes.entries()) {",
									"        // store a workspace with at least a latestProject",
									"        if (ws.latestProjects.length > 0) {",
									"            pm.environment.set(\"ws-id\", ws.id);",
									"            wsWithLatesPtoject=true;",
									"            break;",
									"        }",
									"    }",
									"    // Required for next tests",
									"    pm.expect(wsWithLatesPtoject).to.be.true;",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces.{w}.projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Check values\", function () {",
									"    jsonRes = pm.response.json();",
									"    // expect to have some projects",
									"    pm.expect(jsonRes.length).to.be.above(0);",
									"    ",
									"    // expect to contain the right fields",
									"    var firstProject = jsonRes[0]",
									"    pm.expect(firstProject).to.have.property(\"logo\");",
									"    pm.expect(firstProject).to.have.property(\"logoSmall\");",
									"    pm.expect(firstProject).to.have.property(\"logoLarge\");",
									"    pm.expect(firstProject).to.have.property(\"id\");",
									"    pm.expect(firstProject).to.have.property(\"name\");",
									"    pm.expect(firstProject).to.have.property(\"slug\");",
									"    pm.expect(firstProject).to.have.property(\"description\");",
									"    pm.expect(firstProject).to.have.property(\"color\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(firstProject).length;",
									"    pm.expect(numOfReturnedFields).to.equal(8);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-id}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-id}}",
								"projects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects",
			"item": [
				{
					"name": "N/A log in as user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user3\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    pm.expect(jsonRes).to.be.length.above(0);",
									"    pm.environment.set(\"ws-id\", jsonRes[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-id\", pm.response.json().id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"logo\");",
									"    pm.expect(jsonRes).to.have.property(\"logoSmall\");",
									"    pm.expect(jsonRes).to.have.property(\"logoLarge\");",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"workspace\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsAdmin\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsMember\");",
									"    pm.expect(jsonRes).to.have.property(\"userPermissions\");",
									"    pm.expect(jsonRes).to.have.property(\"userHasPendingInvitation\");",
									"",
									"    pm.expect(jsonRes.description).to.be.eql(\"My description\");",
									"    pm.expect(jsonRes.name).to.be.eql(\"My project\");",
									"",
									"    var workspace = jsonRes.workspace;",
									"    pm.expect(workspace).to.have.property(\"id\");",
									"    pm.expect(workspace).to.have.property(\"name\");",
									"    pm.expect(workspace).to.have.property(\"userRole\");",
									"    pm.expect(workspace).to.have.property(\"slug\");",
									"",
									"    pm.expect(workspace.id).to.be.eql(pm.environment.get(\"ws-id\"));",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(workspace).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"    numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(13);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "My description",
									"type": "text"
								},
								{
									"key": "workspaceId",
									"value": "{{ws-id}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": "/home/daniel/Pictures/phidays_2021.png",
									"disabled": true
								},
								{
									"key": "color",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "My project",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"logo\");",
									"    pm.expect(jsonRes).to.have.property(\"logoSmall\");",
									"    pm.expect(jsonRes).to.have.property(\"logoLarge\");",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"name\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"description\");",
									"    pm.expect(jsonRes).to.have.property(\"workspace\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsAdmin\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsMember\");",
									"    pm.expect(jsonRes).to.have.property(\"userPermissions\");",
									"    pm.expect(jsonRes).to.have.property(\"userHasPendingInvitation\");",
									"",
									"    var workspace = jsonRes.workspace;",
									"    pm.expect(workspace).to.have.property(\"id\");",
									"    pm.expect(workspace).to.have.property(\"name\");",
									"    pm.expect(workspace).to.have.property(\"slug\");",
									"    pm.expect(workspace).to.have.property(\"userRole\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(workspace).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"    numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(13);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.roles.{r}.permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"name\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"order\");",
									"    pm.expect(jsonRes).to.have.property(\"numMembers\");",
									"    pm.expect(jsonRes).to.have.property(\"isAdmin\");",
									"    ",
									"    pm.expect(jsonRes.permissions).to.include(\"view_story\")",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(6);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_story\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    var role = jsonRes[0]",
									"    pm.expect(role).to.have.property(\"name\");",
									"    pm.expect(role).to.have.property(\"slug\");",
									"    pm.expect(role).to.have.property(\"order\");",
									"    pm.expect(role).to.have.property(\"numMembers\");",
									"    pm.expect(role).to.have.property(\"isAdmin\");",
									"",
									"    pm.expect(role.permissions).to.be.length.above(0);",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes[0]).length;",
									"    pm.expect(numOfReturnedFields).to.equal(6);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/roles",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.public-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"    pm.expect(jsonRes).to.include('view_story');",
									"    pm.expect(jsonRes).to.include('modify_story');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_story\",\n        \"modify_story\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/public-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"public-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.public-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"    pm.expect(jsonRes).to.include('view_story');",
									"    pm.expect(jsonRes).to.include('modify_story');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/public-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"public-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.workflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    var jsonRes = pm.response.json();",
									"    var workflow = jsonRes[0];",
									"    pm.environment.set(\"wf-slug\", workflow.slug);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    var role = jsonRes[0]",
									"    pm.expect(role).to.have.property(\"name\");",
									"    pm.expect(role).to.have.property(\"slug\");",
									"    pm.expect(role).to.have.property(\"statuses\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workflows",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workflows"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-id\", pm.response.json().id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"logo\");",
									"    pm.expect(jsonRes).to.have.property(\"logoSmall\");",
									"    pm.expect(jsonRes).to.have.property(\"logoLarge\");",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"workspace\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsAdmin\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsMember\");",
									"    pm.expect(jsonRes).to.have.property(\"userPermissions\");",
									"    pm.expect(jsonRes).to.have.property(\"userHasPendingInvitation\");",
									"",
									"    pm.expect(jsonRes.description).to.be.eql(\"New description\");",
									"    pm.expect(jsonRes.name).to.be.eql(\"New name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "New name",
									"type": "text"
								},
								{
									"key": "description",
									"value": "New description",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.workflows.{wf}.stories",
			"item": [
				{
					"name": "N/A log in as user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user3\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200.projects.{p}.workflows.{wf}.stories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    pm.environment.set(\"ref1\", jsonRes.ref);",
									"    pm.environment.set(\"story_ref\", jsonRes.ref);",
									"",
									"    // Validate response API contract",
									"    pm.expect(jsonRes).to.have.property(\"ref\");",
									"    pm.expect(jsonRes).to.have.property(\"title\");",
									"    pm.expect(jsonRes).to.have.property(\"workflow\");",
									"    pm.expect(jsonRes).to.have.property(\"status\");",
									"    pm.expect(jsonRes).to.have.property(\"createdAt\");",
									"    pm.expect(jsonRes).to.have.property(\"createdBy\");",
									"    pm.expect(jsonRes).to.have.property(\"version\");",
									"    pm.expect(jsonRes).to.have.property(\"prev\");",
									"    pm.expect(jsonRes).to.have.property(\"next\");",
									"    pm.expect(jsonRes).to.have.property(\"assignees\");",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(10);",
									"",
									"    // Validate second-level entries",
									"    pm.expect(jsonRes.status).to.have.property(\"name\");",
									"    pm.expect(jsonRes.status).to.have.property(\"slug\");",
									"    pm.expect(jsonRes.status).to.have.property(\"color\");",
									"    var numOfReturnedFields = Object.keys(jsonRes.status).length;",
									"    pm.expect(numOfReturnedFields).to.equal(3);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"story1\",\n    \"status\": \"done\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workflows/{{wf-slug}}/stories",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workflows",
								"{{wf-slug}}",
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "200.projects.{p}.workflows.{wf}.stories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API contract",
									"    pm.expect(jsonRes[0]).to.have.property(\"ref\");",
									"    pm.expect(jsonRes[0]).to.have.property(\"title\");",
									"    pm.expect(jsonRes[0]).to.have.property(\"status\");",
									"    pm.expect(jsonRes[0]).to.have.property(\"version\");",
									"    pm.expect(jsonRes[0]).to.have.property(\"assignees\");",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes[0]).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"",
									"    // Validate second-level entries",
									"    pm.expect(jsonRes[0].status).to.have.property(\"name\");",
									"    pm.expect(jsonRes[0].status).to.have.property(\"slug\");",
									"    pm.expect(jsonRes[0].status).to.have.property(\"color\");",
									"    var numOfReturnedFields = Object.keys(jsonRes[0].status).length;",
									"    pm.expect(numOfReturnedFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workflows/{{wf-slug}}/stories?offset=0&limit=10",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workflows",
								"{{wf-slug}}",
								"stories"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200.projects.{p}.workflows.{wf}.stories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    pm.environment.set(\"ref2\", jsonRes.ref);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"story1\",\n    \"status\": \"done\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workflows/{{wf-slug}}/stories",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workflows",
								"{{wf-slug}}",
								"stories"
							]
						}
					},
					"response": []
				},
				{
					"name": "200.projects.{p}.workflows.{wf}.stories.reorder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API contract",
									"    pm.expect(jsonRes).to.have.property(\"reorder\");",
									"    pm.expect(jsonRes).to.have.property(\"status\");",
									"    pm.expect(jsonRes).to.have.property(\"stories\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"done\",\n    \"stories\": [{{ref2}}],\n    \"reorder\": {\"place\": \"before\", \"ref\": {{ref1}}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workflows/{{wf-slug}}/stories/reorder",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workflows",
								"{{wf-slug}}",
								"stories",
								"reorder"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.stories.{ref}",
			"item": [
				{
					"name": "N/A log in as user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user3\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200.projects.{p}.stories.{ref}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    // Validate response API contract",
									"    pm.expect(jsonRes).to.have.property(\"ref\");",
									"    pm.expect(jsonRes).to.have.property(\"title\");",
									"    pm.expect(jsonRes).to.have.property(\"workflow\");",
									"    pm.expect(jsonRes).to.have.property(\"status\");",
									"    pm.expect(jsonRes).to.have.property(\"createdAt\");",
									"    pm.expect(jsonRes).to.have.property(\"createdBy\");",
									"    pm.expect(jsonRes).to.have.property(\"version\");",
									"    pm.expect(jsonRes).to.have.property(\"prev\");",
									"    pm.expect(jsonRes).to.have.property(\"next\");",
									"    pm.expect(jsonRes).to.have.property(\"assignees\");",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(10);",
									"",
									"    // Validate second-level entries",
									"    pm.expect(jsonRes.status).to.have.property(\"name\");",
									"    pm.expect(jsonRes.status).to.have.property(\"slug\");",
									"    pm.expect(jsonRes.status).to.have.property(\"color\");",
									"    var numOfReturnedFields = Object.keys(jsonRes.status).length;",
									"    pm.expect(numOfReturnedFields).to.equal(3);",
									"",
									"    pm.expect(jsonRes.workflow).to.have.property(\"name\");",
									"    pm.expect(jsonRes.workflow).to.have.property(\"slug\");",
									"    numOfReturnedFields = Object.keys(jsonRes.workflow).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"});",
									"",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"story_version\", pm.response.json().ref);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/stories/{{story_ref}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"stories",
								"{{story_ref}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200.projects.{p}.stories.{ref}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    // Validate response API contract",
									"    pm.expect(jsonRes).to.have.property(\"ref\");",
									"    pm.expect(jsonRes).to.have.property(\"title\");",
									"    pm.expect(jsonRes).to.have.property(\"workflow\");",
									"    pm.expect(jsonRes).to.have.property(\"status\");",
									"    pm.expect(jsonRes).to.have.property(\"createdAt\");",
									"    pm.expect(jsonRes).to.have.property(\"createdBy\");",
									"    pm.expect(jsonRes).to.have.property(\"version\");",
									"    pm.expect(jsonRes).to.have.property(\"prev\");",
									"    pm.expect(jsonRes).to.have.property(\"next\");",
									"    pm.expect(jsonRes).to.have.property(\"assignees\");",
									"    ",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(10);",
									"",
									"    // Validate second-level entries",
									"    pm.expect(jsonRes.status).to.have.property(\"name\");",
									"    pm.expect(jsonRes.status).to.have.property(\"slug\");",
									"    pm.expect(jsonRes.status).to.have.property(\"color\");",
									"    var numOfReturnedFields = Object.keys(jsonRes.status).length;",
									"    pm.expect(numOfReturnedFields).to.equal(3);",
									"",
									"    pm.expect(jsonRes.workflow).to.have.property(\"name\");",
									"    pm.expect(jsonRes.workflow).to.have.property(\"slug\");",
									"    numOfReturnedFields = Object.keys(jsonRes.workflow).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"",
									"    // Validate updates",
									"    pm.expect(jsonRes.title).to.contain(\"New title\");",
									"    pm.expect(jsonRes.version).to.equal(pm.environment.get(\"story_version\") + 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New title\",\n    \"version\": {{story_version}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/stories/{{story_ref}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"stories",
								"{{story_ref}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.stories.{ref}.assignments",
			"item": [
				{
					"name": "200.projects.{p}.stories.{ref}.assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    // Validate response API contract",
									"    pm.expect(jsonRes).to.have.property(\"story\");",
									"    pm.expect(jsonRes).to.have.property(\"user\");",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"",
									"    // Validate second-level entries",
									"    pm.expect(jsonRes.story).to.have.property(\"ref\");",
									"    pm.expect(jsonRes.story).to.have.property(\"title\");",
									"    var numOfReturnedFields = Object.keys(jsonRes.story).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"",
									"    pm.expect(jsonRes.user).to.have.property(\"username\");",
									"    pm.expect(jsonRes.user).to.have.property(\"fullName\");",
									"    pm.expect(jsonRes.user).to.have.property(\"color\");",
									"    numOfReturnedFields = Object.keys(jsonRes.user).length;",
									"    pm.expect(numOfReturnedFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/stories/{{story_ref}}/assignments",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"stories",
								"{{story_ref}}",
								"assignments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.stories.{ref}.assignments.{username}",
			"item": [
				{
					"name": "200.projects.{p}.stories.{ref}.assignments.{username}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/stories/{{story_ref}}/assignments/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"stories",
								"{{story_ref}}",
								"assignments",
								"{{username}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.invitations",
			"item": [
				{
					"name": "200 projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes).to.have.property(\"invitations\");",
									"    pm.expect(jsonRes).to.have.property(\"alreadyMembers\");",
									"",
									"    var invitations = jsonRes[\"invitations\"];",
									"    ",
									"    // Validate response API fields",
									"    pm.expect(invitations.length).to.eql(2);",
									"",
									"    var invitation = invitations[0];",
									"    var invitationUser = invitations[0].user;",
									"    var invitationRole = invitations[0].role;",
									"    ",
									"    // Validate response API fields",
									"    pm.expect(invitation).to.have.property(\"id\");",
									"    pm.expect(invitation).to.have.property(\"user\");",
									"    pm.expect(invitation).to.have.property(\"role\");",
									"    pm.expect(invitation).to.have.property(\"email\");",
									"",
									"    pm.expect(invitationUser).to.have.property(\"username\");",
									"    pm.expect(invitationUser).to.have.property(\"fullName\");",
									"    pm.expect(invitationUser).to.have.property(\"color\");",
									"",
									"",
									"    pm.expect(invitationRole).to.have.property(\"isAdmin\");",
									"    pm.expect(invitationRole).to.have.property(\"name\");",
									"    pm.expect(invitationRole).to.have.property(\"slug\");",
									"    pm.expect(invitationRole).to.have.property(\"permissions\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(invitation).length;",
									"    var numOfReturnedUserFields = Object.keys(invitationUser).length;",
									"    var numOfReturnedRoleFields = Object.keys(invitationRole).length;",
									"    pm.expect(numOfReturnedFields).to.equal(4);",
									"    pm.expect(numOfReturnedUserFields).to.equal(3);",
									"    pm.expect(numOfReturnedRoleFields).to.equal(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user1000@taiga.demo\",\n      \"roleSlug\": \"admin\"\n    },\n    {\n      \"email\": \"user-test@example.com\",\n      \"roleSlug\": \"general\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 projects.{p}.invitations.resend username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usernameOrEmail\": \"user1000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/resend",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"resend"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 projects.{p}.invitations.resend email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usernameOrEmail\": \"user-test@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/resend",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"resend"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 projects.{p}.invitations.resend",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"not-found\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"not-found-error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usernameOrEmail\": \"user-not-exist@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/resend",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"resend"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    var invitation = jsonRes[0];",
									"",
									"    pm.response.to.have.header(\"Pagination-Offset\");",
									"    pm.response.to.have.header(\"Pagination-Limit\");",
									"    pm.response.to.have.header(\"Pagination-Total\");",
									"",
									"    var invitationUser = jsonRes[0].user;",
									"    var invitationRole = jsonRes[0].role;",
									"    var invitationProject = jsonRes[0].project;",
									"",
									"    // Validate response API fields",
									"    pm.expect(invitation).to.have.property(\"id\");",
									"    pm.expect(invitation).to.have.property(\"user\");",
									"    pm.expect(invitation).to.have.property(\"role\");",
									"    pm.expect(invitation).to.have.property(\"email\");",
									"",
									"    pm.expect(invitationUser).to.have.property(\"username\");",
									"    pm.expect(invitationUser).to.have.property(\"fullName\");",
									"    pm.expect(invitationUser).to.have.property(\"color\");",
									"",
									"    pm.expect(invitationRole).to.have.property(\"isAdmin\");",
									"    pm.expect(invitationRole).to.have.property(\"name\");",
									"    pm.expect(invitationRole).to.have.property(\"slug\");",
									"    pm.expect(invitationRole).to.have.property(\"permissions\");",
									"",
									"    pm.expect(invitationProject).to.have.property(\"id\");",
									"    pm.expect(invitationProject).to.have.property(\"name\");",
									"    pm.expect(invitationProject).to.have.property(\"slug\");",
									"    pm.expect(invitationProject).to.have.property(\"anonUserCanView\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(invitation).length;",
									"    var numOfReturnedUserFields = Object.keys(invitationUser).length;",
									"    var numOfReturnedRoleFields = Object.keys(invitationRole).length;",
									"    var numOfReturnedProjectFields = Object.keys(invitationProject).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"    pm.expect(numOfReturnedUserFields).to.equal(3);",
									"    pm.expect(numOfReturnedRoleFields).to.equal(4);",
									"    pm.expect(numOfReturnedProjectFields).to.equal(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations?offset={{offset}}&limit={{limit}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{offset}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 workspaces.{w}.projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    var project = jsonRes[0];",
									"    // Validate response API fields",
									"    pm.expect(project).to.have.property(\"logo\");",
									"    pm.expect(project).to.have.property(\"logoSmall\");",
									"    pm.expect(project).to.have.property(\"logoLarge\");",
									"    pm.expect(project).to.have.property(\"id\");",
									"    pm.expect(project).to.have.property(\"name\");",
									"    pm.expect(project).to.have.property(\"slug\");",
									"    pm.expect(project).to.have.property(\"description\");",
									"    pm.expect(project).to.have.property(\"color\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(project).length;",
									"    pm.expect(numOfReturnedFields).to.equal(8);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/workspaces/{{ws-id}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"workspaces",
								"{{ws-id}}",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.invitations.accept",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    var invitation = jsonRes;",
									"    var invitationUser = jsonRes.user;",
									"    var invitationRole = jsonRes.role;",
									"    var invitationProject = jsonRes.project;",
									"",
									"    // Validate response API fields",
									"    pm.expect(invitation).to.have.property(\"id\");",
									"    pm.expect(invitation).to.have.property(\"user\");",
									"    pm.expect(invitation).to.have.property(\"role\");",
									"    pm.expect(invitation).to.have.property(\"email\");",
									"",
									"    pm.expect(invitationUser).to.have.property(\"username\");",
									"    pm.expect(invitationUser).to.have.property(\"fullName\");",
									"    pm.expect(invitationUser).to.have.property(\"color\");",
									"",
									"    pm.expect(invitationRole).to.have.property(\"isAdmin\");",
									"    pm.expect(invitationRole).to.have.property(\"name\");",
									"    pm.expect(invitationRole).to.have.property(\"slug\");",
									"    pm.expect(invitationRole).to.have.property(\"permissions\");",
									"",
									"    pm.expect(invitationProject).to.have.property(\"id\");",
									"    pm.expect(invitationProject).to.have.property(\"name\");",
									"    pm.expect(invitationProject).to.have.property(\"slug\");",
									"    pm.expect(invitationProject).to.have.property(\"anonUserCanView\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(invitation).length;",
									"    var numOfReturnedUserFields = Object.keys(invitationUser).length;",
									"    var numOfReturnedRoleFields = Object.keys(invitationRole).length;",
									"    var numOfReturnedProjectFields = Object.keys(invitationProject).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"    pm.expect(numOfReturnedUserFields).to.equal(3);",
									"    pm.expect(numOfReturnedRoleFields).to.equal(4);",
									"    pm.expect(numOfReturnedProjectFields).to.equal(4);",
									"});// Post-request execution tasks",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/accept",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"accept"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save project id in environment\", function () {",
									"    res = pm.response.json();",
									"    // searching for p48",
									"    for (var ws of res) {",
									"        if (ws.latestProjects.length > 0 & ws.isPremium == true & ws.name.includes('uk1-ws-mb')) {",
									"            for (var pj of ws.latestProjects) {",
									"                if (pj.name.includes('p48')) {",
									"                    pm.environment.set(\"pj-id\", pj.id);",
									"                    break;",
									"                }",
									"            }",
									"        }   ",
									"    }    ",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user1001",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1001\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.invitations.{token}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"bad-invitation-token-error\");",
									"    pm.expect(jsonData.error.msg).to.include(\"Invalid token\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/invitations/INVALID_TOKEN",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"invitations",
								"INVALID_TOKEN"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.invitations.{token}.accept",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"bad-invitation-token-error\");",
									"    pm.expect(jsonData.error.msg).to.include(\"Invalid token\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/invitations/INVALID_TOKEN/accept",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"invitations",
								"INVALID_TOKEN",
								"accept"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.invitations.revoke",
			"item": [
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    pm.expect(jsonRes).to.be.length.above(0);",
									"    pm.environment.set(\"ws-id\", jsonRes[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-id\", pm.response.json().id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"logo\");",
									"    pm.expect(jsonRes).to.have.property(\"logoSmall\");",
									"    pm.expect(jsonRes).to.have.property(\"logoLarge\");",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"workspace\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsAdmin\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsMember\");",
									"    pm.expect(jsonRes).to.have.property(\"userPermissions\");",
									"    pm.expect(jsonRes).to.have.property(\"userHasPendingInvitation\");",
									"",
									"    pm.expect(jsonRes.description).to.be.eql(\"My description\");",
									"    pm.expect(jsonRes.name).to.be.eql(\"My project\");",
									"",
									"    var workspace = jsonRes.workspace;",
									"    pm.expect(workspace).to.have.property(\"id\");",
									"    pm.expect(workspace).to.have.property(\"name\");",
									"    pm.expect(workspace).to.have.property(\"userRole\");",
									"    pm.expect(workspace).to.have.property(\"slug\");",
									"",
									"    pm.expect(workspace.id).to.be.eql(pm.environment.get(\"ws-id\"));",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(workspace).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"    numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(13);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "My description",
									"type": "text"
								},
								{
									"key": "workspaceId",
									"value": "{{ws-id}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": "/home/daniel/Pictures/phidays_2021.png",
									"disabled": true
								},
								{
									"key": "color",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "My project",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user1001@taiga.demo\",\n      \"roleSlug\": \"admin\"\n    },\n    {\n      \"username\": \"user9\",\n      \"roleSlug\": \"admin\"\n    },\n    {\n      \"email\": \"user-test@example.com\",\n      \"roleSlug\": \"general\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.invitations.revoke user email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"usernameOrEmail\": \"user1001@taiga.demo\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/revoke",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.invitations.revoke username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"usernameOrEmail\": \"user9\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/revoke",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.invitations.revoke email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"usernameOrEmail\": \"user-test@example.com\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/revoke",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 projects.{p}.invitations.revoke",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"not-found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"usernameOrEmail\": \"nobody@example.com\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/revoke",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects.{p}.invitations invite again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"username\": \"user9\",\n      \"roleSlug\": \"general\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.invitations.{i}",
			"item": [
				{
					"name": "N/A log in as user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    pm.expect(jsonRes).to.be.length.above(0);",
									"    pm.environment.set(\"ws-id\", jsonRes[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-id\", pm.response.json().id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "My description",
									"type": "text"
								},
								{
									"key": "workspaceId",
									"value": "{{ws-id}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": "/home/daniel/Pictures/phidays_2021.png",
									"disabled": true
								},
								{
									"key": "color",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "My project",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 projects.{p}.invitations.{i} invitation not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"not-found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/{{invit-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"{{invit-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    var jsonRes = pm.response.json();",
									"    var invitations = jsonRes[\"invitations\"];",
									"    var invitation = invitations[0];",
									"    pm.environment.set(\"invit-id\", invitation.id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user4@taiga.demo\",\n      \"roleSlug\": \"general\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user4\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A projects.{p}.invitations.accept",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/accept",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"accept"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.invitations.{i} invitation accepted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"invitation-already-accepted-error\");",
									"    pm.expect(jsonData.error.msg).to.include(\"Cannot change role in an accepted invitation\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/{{invit-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"{{invit-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    var jsonRes = pm.response.json();",
									"    var invitations = jsonRes[\"invitations\"];",
									"    var invitation = invitations[0];",
									"    pm.environment.set(\"invit-id\", invitation.id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user-test@example.com\",\n      \"roleSlug\": \"general\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.invitations.revoke",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"usernameOrEmail\": \"user-test@example.com\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/revoke",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.invitations.{i} invitation revoked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"invitation-revoked-error\");",
									"    pm.expect(jsonData.error.msg).to.include(\"The invitation has already been revoked\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/{{invit-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"{{invit-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    var jsonRes = pm.response.json();",
									"    var invitations = jsonRes[\"invitations\"];",
									"    var invitation = invitations[0];",
									"    pm.environment.set(\"invit-id\", invitation.id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"username\": \"user3\",\n      \"roleSlug\": \"general\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.invitations.{i} role error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"non-existing-role-error\");",
									"    pm.expect(jsonData.error.msg).to.include(\"Role does not exist\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"not-exist-role\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/{{invit-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"{{invit-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.invitations.{i}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    var invitation = jsonRes;",
									"    var invitationUser = jsonRes.user;",
									"    var invitationRole = jsonRes.role;",
									"    var invitationProject = jsonRes.project;",
									"",
									"    // Validate response API fields",
									"    pm.expect(invitation).to.have.property(\"id\");",
									"    pm.expect(invitation).to.have.property(\"user\");",
									"    pm.expect(invitation).to.have.property(\"role\");",
									"    pm.expect(invitation).to.have.property(\"email\");",
									"",
									"    pm.expect(invitationUser).to.have.property(\"username\");",
									"    pm.expect(invitationUser).to.have.property(\"fullName\");",
									"    pm.expect(invitationUser).to.have.property(\"color\");",
									"",
									"    pm.expect(invitationRole).to.have.property(\"isAdmin\");",
									"    pm.expect(invitationRole).to.have.property(\"name\");",
									"    pm.expect(invitationRole).to.have.property(\"slug\");",
									"    pm.expect(invitationRole).to.have.property(\"permissions\");",
									"",
									"    pm.expect(invitationProject).to.have.property(\"id\");",
									"    pm.expect(invitationProject).to.have.property(\"name\");",
									"    pm.expect(invitationProject).to.have.property(\"slug\");",
									"    pm.expect(invitationProject).to.have.property(\"anonUserCanView\");",
									"",
									"    pm.expect(invitationRole.slug).to.be.eql(\"admin\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(invitation).length;",
									"    var numOfReturnedUserFields = Object.keys(invitationUser).length;",
									"    var numOfReturnedRoleFields = Object.keys(invitationRole).length;",
									"    var numOfReturnedProjectFields = Object.keys(invitationProject).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"    pm.expect(numOfReturnedUserFields).to.equal(3);",
									"    pm.expect(numOfReturnedRoleFields).to.equal(4);",
									"    pm.expect(numOfReturnedProjectFields).to.equal(4);",
									"});// Post-request execution tasks",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/{{invit-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"{{invit-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.memberships",
			"item": [
				{
					"name": "N/A log in as user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user3\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    pm.expect(jsonRes).to.be.length.above(0);",
									"    pm.environment.set(\"ws-id\", jsonRes[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-id\", pm.response.json().id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"logo\");",
									"    pm.expect(jsonRes).to.have.property(\"logoSmall\");",
									"    pm.expect(jsonRes).to.have.property(\"logoLarge\");",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"workspace\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsAdmin\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsMember\");",
									"    pm.expect(jsonRes).to.have.property(\"userPermissions\");",
									"    pm.expect(jsonRes).to.have.property(\"userHasPendingInvitation\");",
									"",
									"    pm.expect(jsonRes.description).to.be.eql(\"My description\");",
									"    pm.expect(jsonRes.name).to.be.eql(\"My project\");",
									"",
									"    var workspace = jsonRes.workspace;",
									"    pm.expect(workspace).to.have.property(\"id\");",
									"    pm.expect(workspace).to.have.property(\"name\");",
									"    pm.expect(workspace).to.have.property(\"userRole\");",
									"    pm.expect(workspace).to.have.property(\"slug\");",
									"",
									"    pm.expect(workspace.id).to.be.eql(pm.environment.get(\"ws-id\"));",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(workspace).length;",
									"    pm.expect(numOfReturnedFields).to.equal(5);",
									"    numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(13);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "My description",
									"type": "text"
								},
								{
									"key": "workspaceId",
									"value": "{{ws-id}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": "/home/daniel/Pictures/phidays_2021.png",
									"disabled": true
								},
								{
									"key": "color",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "My project",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A 200 projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user4@taiga.demo\",\n      \"roleSlug\": \"general\"\n    },\n    {\n      \"email\": \"user-test@example.com\",\n      \"roleSlug\": \"general\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user4\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A projects.{p}.invitations.accept",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations/accept",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations",
								"accept"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user3\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.memberships",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    var membership = jsonRes[0];",
									"",
									"    pm.response.to.have.header(\"Pagination-Offset\");",
									"    pm.response.to.have.header(\"Pagination-Limit\");",
									"    pm.response.to.have.header(\"Pagination-Total\");",
									"",
									"    pm.expect(membership).to.have.property(\"user\");",
									"    pm.expect(membership).to.have.property(\"role\");",
									"",
									"    var membershipUser = jsonRes[0].user;",
									"\tvar membershipRole = jsonRes[0].role;",
									"    ",
									"    pm.expect(membershipUser).to.have.property(\"username\");",
									"    pm.expect(membershipUser).to.have.property(\"fullName\");",
									"    pm.expect(membershipUser).to.have.property(\"color\");",
									"",
									"    pm.expect(membershipRole).to.have.property(\"isAdmin\");",
									"    pm.expect(membershipRole).to.have.property(\"name\");",
									"    pm.expect(membershipRole).to.have.property(\"slug\");",
									"    pm.expect(membershipRole).to.have.property(\"permissions\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(membership).length;",
									"    var numOfReturnedUserFields = Object.keys(membershipUser).length;",
									"\tvar numOfReturnedRoleFields = Object.keys(membershipRole).length;",
									"\tpm.expect(numOfReturnedFields).to.equal(2);",
									"\tpm.expect(numOfReturnedUserFields).to.equal(3);",
									"\tpm.expect(numOfReturnedRoleFields).to.equal(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/memberships?offset={{offset}}&limit={{limit}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"memberships"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{offset}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 projects.{p}.memberships.{u} membership not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"not-found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"general\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/memberships/not-exist",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"memberships",
								"not-exist"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.memberships.{u} role error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"non-existing-role-error\");",
									"    pm.expect(jsonData.error.msg).to.include(\"Role does not exist\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"not-exist-role\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/memberships/user4",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"memberships",
								"user4"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.memberships.{u} only one admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"membership-is-the-only-admin-error\");",
									"    pm.expect(jsonData.error.msg).to.include(\"Membership is the only admin\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"general\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/memberships/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"memberships",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.memberships.{u}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    var membership = jsonRes;",
									"    var membershipUser = jsonRes.user;",
									"    var membershipRole = jsonRes.role;",
									"",
									"    // Validate response API fields",
									"    pm.expect(membership).to.have.property(\"user\");",
									"    pm.expect(membership).to.have.property(\"role\");",
									"",
									"    pm.expect(membershipUser).to.have.property(\"username\");",
									"    pm.expect(membershipUser).to.have.property(\"fullName\");",
									"    pm.expect(membershipUser).to.have.property(\"color\");",
									"",
									"    pm.expect(membershipRole).to.have.property(\"isAdmin\");",
									"    pm.expect(membershipRole).to.have.property(\"name\");",
									"    pm.expect(membershipRole).to.have.property(\"slug\");",
									"    pm.expect(membershipRole).to.have.property(\"permissions\");",
									"",
									"    pm.expect(membershipRole.slug).to.be.eql(\"admin\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(membership).length;",
									"    var numOfReturnedUserFields = Object.keys(membershipUser).length;",
									"    var numOfReturnedRoleFields = Object.keys(membershipRole).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"    pm.expect(numOfReturnedUserFields).to.equal(3);",
									"    pm.expect(numOfReturnedRoleFields).to.equal(4);",
									"});// Post-request execution tasks",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/memberships/user4",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"memberships",
								"user4"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.memberships.{u}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    var membership = jsonRes;",
									"    var membershipUser = jsonRes.user;",
									"    var membershipRole = jsonRes.role;",
									"",
									"    // Validate response API fields",
									"    pm.expect(membership).to.have.property(\"user\");",
									"    pm.expect(membership).to.have.property(\"role\");",
									"",
									"    pm.expect(membershipUser).to.have.property(\"username\");",
									"    pm.expect(membershipUser).to.have.property(\"fullName\");",
									"    pm.expect(membershipUser).to.have.property(\"color\");",
									"",
									"    pm.expect(membershipRole).to.have.property(\"isAdmin\");",
									"    pm.expect(membershipRole).to.have.property(\"name\");",
									"    pm.expect(membershipRole).to.have.property(\"slug\");",
									"    pm.expect(membershipRole).to.have.property(\"permissions\");",
									"",
									"    pm.expect(membershipRole.slug).to.be.eql(\"general\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(membership).length;",
									"    var numOfReturnedUserFields = Object.keys(membershipUser).length;",
									"    var numOfReturnedRoleFields = Object.keys(membershipRole).length;",
									"    pm.expect(numOfReturnedFields).to.equal(2);",
									"    pm.expect(numOfReturnedUserFields).to.equal(3);",
									"    pm.expect(numOfReturnedRoleFields).to.equal(4);",
									"});// Post-request execution tasks",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleSlug\": \"general\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/memberships/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"memberships",
								"{{username}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "projects.{p}.workspace_member_permissions",
			"item": [
				{
					"name": "N/A log in as user1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1000\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save projects slugs in environment\", function () {",
									"    res = pm.response.json();",
									"    // store a premium project containing latestProjects",
									"    for (var ws of res) {",
									"        if (ws.latestProjects.length > 0 & ws.isPremium == true) {",
									"            pm.environment.set(\"pj-id\", ws.latestProjects[0].id);",
									"            break;",
									"        }   ",
									"    }",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"    pm.expect(jsonRes).to.include('view_story');",
									"    pm.expect(jsonRes).to.include('modify_story');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_story\",\n        \"modify_story\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    pm.expect(jsonRes.length).to.eql(2);",
									"    pm.expect(jsonRes).to.include('view_story');",
									"    pm.expect(jsonRes).to.include('modify_story');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// NOTE: This test simply undo the previous changes"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Save projects slugs in environment\", function () {",
									"    res = pm.response.json();",
									"    // store a not-premium project containing latestProjects",
									"    for (var ws of res) {",
									"        if (ws.latestProjects.length > 0 & ws.isPremium == false) {",
									"            pm.environment.set(\"pj-id\", ws.latestProjects[0].id);",
									"            break;",
									"        }   ",
									"    }    ",
									"});",
									"",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"// WARNING: THIS TEST MAY FAIL DUE TO IT'S NOT VERIFIED THE USER IS A PJ-ADMIN",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"not-premium-workspace-error\");",
									"    pm.expect(jsonData.error.msg).to.eql(\"The workspace is not a premium one, so these perms cannot be seen\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 projects.{p}.workspace-member-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"// WARNING: THIS TEST MAY FAIL DUE TO IT'S NOT VERIFIED THE USER IS A PJ-ADMIN",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"not-premium-workspace-error\");",
									"    pm.expect(jsonData.error.msg).to.eql(\"The workspace is not a premium one, so these perms cannot be set\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"view_story\",\n        \"modify_story\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/workspace-member-permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"workspace-member-permissions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "my",
			"item": [
				{
					"name": "N/A log in as user900",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user900\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    pm.expect(jsonRes).to.be.length.above(0);",
									"    pm.environment.set(\"ws-id\", jsonRes[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-id\", pm.response.json().id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "My description",
									"type": "text"
								},
								{
									"key": "workspaceId",
									"value": "{{ws-id}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": "/home/daniel/Pictures/phidays_2021.png",
									"disabled": true
								},
								{
									"key": "color",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "My project",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 my.project.permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes.length).to.be.above(0);",
									"    pm.expect(jsonRes).to.include('view_story');",
									"    pm.expect(jsonRes).to.include('modify_story');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/projects/{{pj-id}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"projects",
								"{{pj-id}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A projects.{p}.invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invitations\": [\n    {\n      \"email\": \"user901@taiga.demo\",\n      \"roleSlug\": \"admin\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/invitations",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"invitations"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user901",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user901\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    var someWsHaveLatestProjects = false;",
									"    var someWsHaveInvitedProjects = false;",
									"    var someWsHaveNoLatestProjects = false;",
									"    for (const [i, ws] of jsonRes.entries()) {",
									"",
									"        // just entered once (by the first workspace with latestProjects)",
									"        if (!someWsHaveLatestProjects && ws.latestProjects.length >0) {",
									"            someWsHaveLatestProjects = true;",
									"            ",
									"            pm.expect(ws.totalProjects).to.be.above(0);",
									"            pm.expect(ws.hasProjects).to.be.true;",
									"            ",
									"            // expect latestProjects to contain the right fields",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logo\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logoSmall\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"logoLarge\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"id\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"name\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"slug\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"description\");",
									"            pm.expect(ws.latestProjects[0]).to.have.property(\"color\");",
									"",
									"  ",
									"            // Validate we're not returning more fields than expected",
									"            var numOfReturnedFields = Object.keys(ws).length;",
									"            pm.expect(numOfReturnedFields).to.equal(11);",
									"            numOfReturnedFields = Object.keys(ws.latestProjects[0]).length;",
									"            pm.expect(numOfReturnedFields).to.equal(8);",
									"        }",
									"",
									"        if (!someWsHaveInvitedProjects && ws.invitedProjects.length >0) {",
									"            someWsHaveInvitedProjects = true;",
									"",
									"            // expect invitedProjects to contain the right fields",
									"            pm.expect(ws.invitedProjects[0]).to.have.property(\"logo\");",
									"            pm.expect(ws.invitedProjects[0]).to.have.property(\"logoSmall\");",
									"            pm.expect(ws.invitedProjects[0]).to.have.property(\"logoLarge\");",
									"            pm.expect(ws.invitedProjects[0]).to.have.property(\"id\");",
									"            pm.expect(ws.invitedProjects[0]).to.have.property(\"name\");",
									"            pm.expect(ws.invitedProjects[0]).to.have.property(\"slug\");",
									"            pm.expect(ws.invitedProjects[0]).to.have.property(\"description\");",
									"            pm.expect(ws.invitedProjects[0]).to.have.property(\"color\");",
									"",
									"            // Validate we're not returning more fields than expected",
									"            var numOfReturnedFields = Object.keys(ws).length;",
									"            pm.expect(numOfReturnedFields).to.equal(11);",
									"            numOfReturnedFields = Object.keys(ws.invitedProjects[0]).length;",
									"            pm.expect(numOfReturnedFields).to.equal(8);",
									"",
									"        }",
									"    };",
									"    pm.expect(someWsHaveLatestProjects).to.be.true;",
									"    pm.expect(someWsHaveInvitedProjects).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 my.workspaces.{w}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    pm.expect(jsonRes).to.have.property(\"id\");",
									"    pm.expect(jsonRes).to.have.property(\"name\");",
									"    pm.expect(jsonRes).to.have.property(\"slug\");",
									"    pm.expect(jsonRes).to.have.property(\"color\");",
									"    pm.expect(jsonRes).to.have.property(\"latestProjects\");",
									"    pm.expect(jsonRes).to.have.property(\"invitedProjects\");",
									"    pm.expect(jsonRes).to.have.property(\"totalProjects\");",
									"    pm.expect(jsonRes).to.have.property(\"hasProjects\");",
									"    pm.expect(jsonRes).to.have.property(\"isPremium\");",
									"    pm.expect(jsonRes).to.have.property(\"userRole\");",
									"    pm.expect(jsonRes).to.have.property(\"userIsOwner\");",
									"    ",
									"    var numOfReturnedFields = Object.keys(jsonRes).length;",
									"    pm.expect(numOfReturnedFields).to.equal(11);        ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces/{{ws-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces",
								"{{ws-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "system",
			"item": [
				{
					"name": "200 system.languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    for (const [i, lang] of jsonRes.entries()) {       ",
									"        pm.expect(lang).to.have.property(\"code\");",
									"        pm.expect(lang).to.have.property(\"name\");",
									"        pm.expect(lang).to.have.property(\"englishName\");",
									"        pm.expect(lang).to.have.property(\"textDirection\");",
									"        pm.expect(lang).to.have.property(\"scriptType\");",
									"        pm.expect(lang).to.have.property(\"isDefault\");",
									"    }",
									"});// Post-request execution tasks",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/system/languages",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"system",
								"languages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "errors (main)",
			"item": [
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"token\");",
									"    pm.expect(jsonRes).to.have.property(\"refresh\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A my.workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"    ",
									"    pm.expect(jsonRes).to.be.length.above(0);",
									"    pm.environment.set(\"ws-id\", jsonRes[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/my/workspaces",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"my",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"pj-id\", pm.response.json().id);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "description",
									"value": "My description",
									"type": "text"
								},
								{
									"key": "workspaceId",
									"value": "{{ws-id}}",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": "/home/daniel/Pictures/phidays_2021.png",
									"disabled": true
								},
								{
									"key": "color",
									"value": "2",
									"type": "text"
								},
								{
									"key": "name",
									"value": "My project",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 bad-request perm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"bad-request\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"not-valid-permissions-set-error\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"wrong_permission\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 authorization-error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"authorization-error\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"authorization-error\");",
									"    ",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"wrong_password\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 forbidden perm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"forbidden\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"forbidden-error\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permissions\": [\n        \"wrong_permission\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/{{pj-id}}/roles/{{role-slug}}/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"{{pj-id}}",
								"roles",
								"{{role-slug}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "N/A log in as user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"pm.test(\"Environment variable settings\", function () {",
									"    pm.environment.set(\"auth_token\", pm.response.json().token);",
									"    pm.environment.set(\"refresh_token\", pm.response.json().refresh);",
									"});",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response JSON is correct\", function () {",
									"    var jsonRes = pm.response.json();",
									"",
									"    // Validate response API fields",
									"    pm.expect(jsonRes).to.have.property(\"token\");",
									"    pm.expect(jsonRes).to.have.property(\"refresh\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 not-found pj",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"not-found\");",
									"    pm.expect(jsonData.error.detail).to.eql(\"not-found-error\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/projects/xxxxxxxxxxxxxxxxxxxxxx",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"projects",
								"xxxxxxxxxxxxxxxxxxxxxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "422 validation-error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Post-request execution tasks",
									"",
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Error JSON is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql(\"validation-error\");",
									"    pm.expect(jsonData.error.detail[0].loc[1]).to.eql(\"password\");",
									"    pm.expect(jsonData.error.detail[0].msg).to.eql(\"field required\");",
									"    pm.expect(jsonData.error.detail[0].type).to.eql(\"value_error.missing\");",
									"",
									"    // Validate we're not returning more fields than expected",
									"    var numOfReturnedFields = Object.keys(jsonData).length;",
									"    var numOfErrorFields = Object.keys(jsonData.error).length;",
									"    pm.expect(numOfReturnedFields).to.equal(1);",
									"    pm.expect(numOfErrorFields).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"passXXXXXXXXXXXXXXXword\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "headers",
			"item": [
				{
					"name": "without_correlation_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"});",
									"pm.test(\"Response Header contains correlation-idJSON is correct\", function () {",
									"    var resCorrelationId = pm.response.headers.get(\"correlation-id\");",
									"    ",
									"    pm.expect(resCorrelationId).not.eq(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "with_correlation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests",
									"pm.test(\"HTTP status code is correct\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"});",
									"pm.test(\"Response Header contains correlation-idJSON is correct\", function () {",
									"    var reqCorrelationId = pm.environment.get(\"correlation_id\"); // send",
									"    var resCorrelationId = pm.response.headers.get(\"correlation-id\"); // recived",
									"    pm.expect(resCorrelationId).eq(reqCorrelationId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Correlation-ID",
								"value": "{{correlation_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123123\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{domain}}{{port}}{{api_url}}/auth/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{domain}}{{port}}{{api_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}